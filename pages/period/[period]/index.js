import Head from "next/head";
import { getPeriodPage, getAllPeriods } from "../../../data";
import MyLayout from "components/Layout";
import Link from "next/link";
import Disc from "../../../components/Disc";
import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";

const Period = ({ period, data }) => {
  const [isDiskOpen, setIsDiscOpen] = useState(false);
  const [currentDisc, setCurentDisc] = useState();
  data = data[0];
  const discs = data.discs;
  console.log(discs);
  const handleDiscClick = (disc) => {
    setCurentDisc(disc);
    setIsDiscOpen(true);
  };
  return (
    <div>
      <Head>
        <title>A Murmuration</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="pt-[66px] mx-5 border-l-[1px] border-solid border-saddle h-screen">
        {data.future ? (
          <>
            <div className="pl-[32px] py-2 font-sans w-full border-b-[1px] border-solid border-saddle fixed top-[66px] left-0">
              <div className="flex items-center snap-center">
                <span className="w-3 h-3 bg-platinum border-solid border-[1px] border-saddle rounded-full ml-[-18px]"></span>
                <Link href={`/period/${data.future}`}>
                  <a className="ml-4 uppercase bg-saddle text-iceberg px-3 py-1 rounded-full text-center">
                    To the Future
                  </a>
                </Link>
              </div>
            </div>
            <div className="mt-[60px] ml-[12px] m-2 font-sans">
              <p>Move around to see the entire map.</p>
              <p>Click the discs to see its meaning.</p>
            </div>
          </>
        ) : (
          <div className="ml-[12px] m-2 font-sans">
            <p>Move around to see the entire map.</p>
            <p>Click the discs to see its meaning.</p>
          </div>
        )}
        {discs.map((disc, key) => (
          <div key={key} className="pl-4 pb-4">
            <a
              onClick={() => handleDiscClick(disc)}
              className="hover:cursor-pointer"
            >
              {disc.country}
            </a>
          </div>
        ))}
        <div className="flex flex-col w-full absolute bottom-0 left-0">
          <div className="pl-[32px] text-saddle flex flex-row items-center border-b-[1px] border-solid border-saddle">
            <span className="w-3 h-3 bg-saddle border-solid border-[1px] border-saddle rounded-full ml-[-18px]"></span>
            <div className=" text-5xl">{period}</div>
            <div className="font-sans text-md flex flex-col justify-start mb-auto">
              <p className="pl-2">CURRENT.</p>
              <a className=" uppercase border-[1px] border-saddle border-solid px-2 rounded-full">
                About this Era
              </a>
            </div>
          </div>
          <div className="pl-[32px] py-2 font-sans w-full">
            <div className="flex items-center snap-center">
              <span className="w-3 h-3 bg-platinum border-solid border-[1px] border-saddle rounded-full ml-[-18px]"></span>
              <Link href={`/period/${data.past}`}>
                <a className="ml-4 uppercase bg-saddle text-iceberg px-3 py-1 rounded-full text-center">
                  To the Past
                </a>
              </Link>
            </div>
          </div>
        </div>
      </main>
      <AnimatePresence>
        {isDiskOpen && (
          <Disc data={currentDisc} setIsDiscOpen={setIsDiscOpen} />
        )}
      </AnimatePresence>
      <Disc />
    </div>
  );
};

export async function getStaticProps(context) {
  const data = await getPeriodPage(context.params.period);
  const page = "period";
  const period = context.params.period;
  return {
    props: { period, data, page },
    revalidate: 10,
  };
}

export async function getStaticPaths() {
  const data = await getAllPeriods();
  const periods = data.map((period) => ({
    params: { period: period.period },
  }));
  return {
    paths: periods,
    fallback: false, // can also be true or 'blocking'
  };
}

Period.Layout = MyLayout;
export default Period;
