import React, { useRef, useState } from "react";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import period from "../admin/schemas/period";
import { getAllDiscs, getAllPeriods } from "../data";
import styles from "../styles/Home.module.scss";
import MyLayout from "components/Layout";
import { AnimatePresence, motion } from "framer-motion";
import Slider from "react-slick";
import Selector from "svg/Selector";
import Hyphen from "svg/Hyphen";
const Home = ({ periods }) => {
  const ref = useRef();
  const [selectedPeriod, setSelectedPeriod] = useState(3);
  const [isChanging, setChanging] = useState(false);

  const settings = {
    arrows: false,
    dots: false,
    infinite: false,
    centerMode: true,
    slidesToShow: 1,
    slidesToScroll: 1,
    initialSlide: 3,
    vertical: true,
    verticalSwiping: true,
    // centerMode: true,
    swipeToSlide: true,
    className: "absolute left-0 top-[50%] h-screen w-full bg-transparent",
    afterChange: (index) => {
      setSelectedPeriod(index);
      setChanging(false);
    },
    beforeChange: () => setChanging(true),
    onSwipe: () => console.log("swiped"),
  };
  const item = {
    hidden: { opacity: 0 },
    show: { opacity: 1 },
  };
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.5,
      },
    },
  };

  return (
    <div className="overflow-hidden">
      <Head>
        <title>A Murmuration</title>
        <meta name="description" content="Generated by create next app" />
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      <main
        className="pt-[310px] px-5 border-solid border-saddle w-full bg-transparent overflow-hidden"
        ref={ref}
      >
        {/* <div className="absolute left-[17px] z-30 selector w-full flex justify-start items-center">
          <span className="w-1/2">
            <Selector />
          </span>
          <span className="w-1/2 ml-[-28px]">
            <Hyphen />
          </span>
        </div> */}

        <Slider
          {...settings}
          variants={container}
          initial="hidden"
          animate="show"
        >
          {periods.map((period, key) => (
            <motion.div
              key={key}
              variants={item}
              className={
                selectedPeriod == key
                  ? "relative flex justify-center snap-center w-full text-iceberg bg-saddle border-t-white border-solid border-t-[1px]"
                  : "flex justify-center snap-center w-full text-saddle border-t-white border-solid border-t-[1px]"
              }
            >
              <Link href={`/period/${period.period}`}>
                <div
                  className={
                    selectedPeriod == key
                      ? "visible absolute bg-cheddar top-0 left-0 w-full h-[108px]"
                      : "hidden"
                  }
                ></div>
              </Link>
              <a
                className={
                  selectedPeriod == key
                    ? "blur-sm w-full flex justify-start text-7xl pl-1 tracking-tightest  text-left max-w-[302px] m-center py-6"
                    : "w-full flex justify-start text-7xl pl-1 tracking-tightest  text-left max-w-[302px] m-center  py-6"
                }
              >
                <span className="mr-[18px] w-[142px] leading-[60px]">
                  {period.period.split("-")[0]}
                </span>
                <span className="leading-[60px]">
                  {period.period.split("-")[1]}
                </span>
              </a>
            </motion.div>
          ))}
        </Slider>
      </main>
    </div>
  );
};

export async function getStaticProps() {
  const periods = await getAllPeriods();
  const page = "home";
  return {
    props: { periods, page },
    revalidate: 10,
  };
}

Home.Layout = MyLayout;
export default Home;
